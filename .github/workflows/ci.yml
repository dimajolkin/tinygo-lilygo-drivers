name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      
    - name: Check test coverage
      run: |
        go tool cover -func=coverage.out
        
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.22'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
        
    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not properly formatted:"
          gofmt -s -l .
          echo "Run 'go fmt ./...' to fix formatting issues."
          exit 1
        fi

  tinygo-build:
    name: TinyGo Build Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target: [esp32s3, esp32c3, rp2040, arduino-nano33]
        example: [st7789-basic]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: Install TinyGo
      run: |
        wget https://github.com/tinygo-org/tinygo/releases/download/v0.31.2/tinygo_0.31.2_amd64.deb
        sudo dpkg -i tinygo_0.31.2_amd64.deb
        
    - name: Build example for ${{ matrix.target }}
      run: |
        cd examples/${{ matrix.example }}
        go mod download
        echo "Building for target: ${{ matrix.target }}"
        tinygo build -target=${{ matrix.target }} -o ${{ matrix.example }}-${{ matrix.target }}.bin .
        ls -la *.bin
        
    - name: Check binary size
      run: |
        cd examples/${{ matrix.example }}
        BINARY_SIZE=$(stat -c%s "${{ matrix.example }}-${{ matrix.target }}.bin")
        echo "Binary size for ${{ matrix.target }}: $BINARY_SIZE bytes"
        
        # Check that binary is not too large (limits for different platforms)
        case "${{ matrix.target }}" in
          "esp32s3"|"esp32c3")
            MAX_SIZE=1048576  # 1MB for ESP32
            ;;
          "rp2040")
            MAX_SIZE=2097152  # 2MB for RP2040
            ;;
          "arduino-nano33")
            MAX_SIZE=262144   # 256KB for Arduino Nano 33
            ;;
          *)
            MAX_SIZE=1048576  # Default 1MB
            ;;
        esac
        
        if [ $BINARY_SIZE -gt $MAX_SIZE ]; then
          echo "❌ Binary size ($BINARY_SIZE bytes) exceeds maximum allowed size ($MAX_SIZE bytes) for ${{ matrix.target }}"
          exit 1
        else
          echo "✅ Binary size OK for ${{ matrix.target }}"
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'
        
    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
